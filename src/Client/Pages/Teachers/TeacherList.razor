@page "/teachers"
@using BlazorSchoolManager.Application.Features.Teachers.Queries;
@using BlazorSchoolManager.Application.Features.Teachers.Commands;
@using BlazorSchoolManager.Shared.Constants.Application;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Security.Claims;
@inherits BaseListComponent;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Pages.Teachers.TeacherList> _localizer;
@inject ITeacherManager TeacherManager;
<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

@code {
    [CascadingParameter] private HubConnection HubConnection { get; set; }

    private IEnumerable<GetTeachersResponsePaged> _pagedData;
    private MudTable<GetTeachersResponsePaged> _table;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await _authenticationManager.CurrentUser();
        _canCreate = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Teachers.Create)).Succeeded;
        _canEdit = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Teachers.Edit)).Succeeded;
        _canDelete = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Teachers.Delete)).Succeeded;
        _canExport = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Teachers.Export)).Succeeded;
        _canSearch = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Teachers.Search)).Succeeded;

        _loaded = true;
        HubConnection = HubConnection.TryInitialize(_navigationManager);
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
    }

    private async Task<TableData<GetTeachersResponsePaged>> ServerReload(TableState state)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            state.Page = 0;
        }
        await LoadData(state.Page, state.PageSize, state);
        return new TableData<GetTeachersResponsePaged> { TotalItems = _totalItems, Items = _pagedData };
    }

    private async Task LoadData(int pageNumber, int pageSize, TableState state)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            orderings = state.SortDirection != SortDirection.None ? new[] { $"{state.SortLabel} {state.SortDirection}" } : new[] { $"{state.SortLabel}" };
        }

        var request = new GetTeachersRequest { PageSize = pageSize, PageNumber = pageNumber + 1, SearchString = _searchString, Orderby = orderings };
        var response = await TeacherManager.GetAsync(request);
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _pagedData = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private async Task ExportToExcel()
    {
        var message = string.IsNullOrWhiteSpace(_searchString)
                ? _localizer["Teachers exported"]
                : _localizer["Filtered Teachers exported"];

        await ExportToExcel(TeacherManager, nameof(Teachers), message);
    }

    /**
    private async Task ExportToExcel()
    {
        var response = await TeacherManager.ExportToExcelAsync(_searchString);
        if (response.Succeeded)
        {
            await _jsRuntime.InvokeVoidAsync("Download", new
            {
                ByteArray = response.Data,
                FileName = $"{nameof(Teachers).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
                MimeType = ApplicationConstants.MimeTypes.OpenXml
            });
            _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
                ? _localizer["Teachers exported"]
                : _localizer["Filtered Teachers exported"], Severity.Success);
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }**/

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            var teacher = _pagedData.FirstOrDefault(c => c.Id == id);
            if (teacher != null)
            {
                //parameters.Add(nameof(AddEditTeacherModal.AddEditTeacherModel), new AddEditTeacherCommand
                parameters.Add(nameof(AddEditTeacherModal), new AddEditTeacherCommand
                {
                    Id = teacher.Id,
                    FirstName = teacher.FirstName,
                    LastName = teacher.LastName,
                    Description = teacher.Description,
                    Age = teacher.Age,
                    Gender = teacher.Gender
                });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditTeacherModal>(id == 0 ? _localizer["Create"] : _localizer["Edit"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            OnSearch("");
        }
    }

    private async Task Delete(int id)
    {
        var result = await GetDialogData(id, _dialogService, _localizer["Delete"], _localizer["Delete Content"]);
        if (!result.Cancelled)
        {
            var response = await TeacherManager.DeleteAsync(id);
            if (response.Succeeded)
            {
                OnSearch("");
                await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
                _snackBar.Add(response.Messages[0], Severity.Success);
            }
            else
            {
                OnSearch("");
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }
}

<HeroTitle Title="@_localizer["Teachers"]" Description="@_localizer["Manage Teachers."]" />
@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Elevation="25" ServerData="@(new Func<TableState, Task<TableData<GetTeachersResponsePaged>>>(ServerReload))" Hover="true" Dense="@_dense" Bordered="@_bordered" Striped="@_striped" @ref="_table">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canCreate)
                {
                    <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => InvokeModal(0))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">@_localizer["Create"]</MudButton>
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">@_localizer["Reload"]</MudButton>
                    @if (_canExport)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">@_localizer["Export"]</MudButton>
                    }
                }
                else
                {
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">@_localizer["Reload"]</MudButton>
                    @if (_canExport)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">@_localizer["Export"]</MudButton>
                    }
                }
            </div>
            <MudToolBarSpacer />
            @if (_canSearch)
            {
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="@_localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="GetTeachersResponsePaged" SortLabel="Id">@_localizer["Id"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetTeachersResponsePaged" SortLabel="Name">@_localizer["Name"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetTeachersResponsePaged" SortLabel="Capacity">@_localizer["Capacity"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetTeachersResponsePaged" SortLabel="Description">@_localizer["Description"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetTeachersResponsePaged" SortLabel="IsOnline">@_localizer["IsOnline"]</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:right">@_localizer["Actions"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">
                <MudHighlighter Text="@context.FullName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Description">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Age">@context.Age</MudTd>
            <MudTd DataLabel="Gender">@context.Gender</MudTd>
            <MudTd DataLabel="Actions" Style="text-align: right">
                @if (_canEdit || _canDelete)
                    {
                    <MudMenu Label="@_localizer["Actions"]" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">
                        @if (_canEdit)
                            {
                            <MudMenuItem @onclick="@(() => InvokeModal(@context.Id))">@_localizer["Edit"]</MudMenuItem>
                            }
                        @if (_canDelete)
                            {
                            <MudMenuItem @onclick="@(() => Delete(@context.Id))">@_localizer["Delete"]</MudMenuItem>
                            }
                    </MudMenu>
                    }
                    else
                    {
                    <MudButton Variant="Variant.Filled"
                               DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch"
                               IconColor="Color.Secondary"
                               Size="Size.Small"
                               Color="Color.Surface">
                        @_localizer["No Allowed Actions"]
                    </MudButton>
                    }
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudSwitch @bind-Checked="@_dense" Color="Color.Secondary" Style="margin-left: 5px;">@_localizer["Dense"]</MudSwitch>
            <MudSwitch @bind-Checked="@_striped" Color="Color.Tertiary" Style="margin-left: 5px;">@_localizer["Striped"]</MudSwitch>
            <MudSwitch @bind-Checked="@_bordered" Color="Color.Warning" Style="margin-left: 5px;">@_localizer["Bordered"]</MudSwitch>
        </FooterContent>
        <PagerContent>
            <TablePager />
        </PagerContent>
    </MudTable>
}
