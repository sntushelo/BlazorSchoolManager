@page "/venues"
@using BlazorSchoolManager.Application.Features.Venues.Queries;
@using BlazorSchoolManager.Application.Features.Venues.Commands;
@using BlazorSchoolManager.Shared.Constants.Application;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Security.Claims;
@inject Microsoft.Extensions.Localization.IStringLocalizer<Pages.Venues.VenueList> _localizer
@inject IVenueManager VenueManager
<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<h3>VenueList</h3>

@code {
    [CascadingParameter] private HubConnection HubConnection { get; set; }

    private IEnumerable<GetVenuesResponsePaged> _pagedData;
    private MudTable<GetVenuesResponsePaged> _table;
    private int _totalItems;
    private int _currentPage;
    private string _searchString = "";
    private bool _dense = false;
    private bool _striped = true;
    private bool _bordered = false;

    private ClaimsPrincipal _currentUser;
    private bool _canCreateVenues;
    private bool _canEditVenues;
    private bool _canDeleteVenues;
    private bool _canExportVenues;
    private bool _canSearchVenues;
    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await _authenticationManager.CurrentUser();
        _canCreateVenues = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Venues.Create)).Succeeded;
        _canEditVenues = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Venues.Edit)).Succeeded;
        _canDeleteVenues = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Venues.Delete)).Succeeded;
        _canExportVenues = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Venues.Export)).Succeeded;
        _canSearchVenues = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.Venues.Search)).Succeeded;

        _loaded = true;
        HubConnection = HubConnection.TryInitialize(_navigationManager);
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
    }

    private async Task<TableData<GetVenuesResponsePaged>> ServerReload(TableState state)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            state.Page = 0;
        }
        await LoadData(state.Page, state.PageSize, state);
        return new TableData<GetVenuesResponsePaged> { TotalItems = _totalItems, Items = _pagedData };
    }

    private async Task LoadData(int pageNumber, int pageSize, TableState state)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            orderings = state.SortDirection != SortDirection.None ? new[] { $"{state.SortLabel} {state.SortDirection}" } : new[] { $"{state.SortLabel}" };
        }

        var request = new GetVenuesRequest { PageSize = pageSize, PageNumber = pageNumber + 1, SearchString = _searchString, Orderby = orderings };
        var response = await VenueManager.GetAsync(request);
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _pagedData = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private async Task ExportToExcel()
    {
        var response = await VenueManager.ExportToExcelAsync(_searchString);
        if (response.Succeeded)
        {
            await _jsRuntime.InvokeVoidAsync("Download", new
            {
                ByteArray = response.Data,
                FileName = $"{nameof(Venues).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
                MimeType = ApplicationConstants.MimeTypes.OpenXml
            });
            _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
                ? _localizer["Venues exported"]
                : _localizer["Filtered Venues exported"], Severity.Success);
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            var venue = _pagedData.FirstOrDefault(c => c.Id == id);
            if (venue != null)
            {
                //parameters.Add(nameof(AddEditProductModal.AddEditProductModel), new AddEditProductCommand
                parameters.Add(nameof(AddEditVenueModal), new AddEditVenueCommand
                {
                    Id = venue.Id,
                    Name = venue.Name,
                    Description = venue.Description,
                    Capacity = venue.Capacity,
                    IsOnline = venue.IsOnline
                });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditVenueModal>(id == 0 ? _localizer["Create"] : _localizer["Edit"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            OnSearch("");
        }
    }

    private async Task Delete(int id)
    {
        string deleteContent = _localizer["Delete Content"];
        var parameters = new DialogParameters
        {
                {nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>(_localizer["Delete"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await VenueManager.DeleteAsync(id);
            if (response.Succeeded)
            {
                OnSearch("");
                await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
                _snackBar.Add(response.Messages[0], Severity.Success);
            }
            else
            {
                OnSearch("");
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }

}
